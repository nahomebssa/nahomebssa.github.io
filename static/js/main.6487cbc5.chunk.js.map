{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GlobalNavigation","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","NavLink","Button","MyHero","Section","Container","Jumbotron","variant","styled","div","SectionHeading","h1","SectionSubtitle","h2","AboutSection","WorkSection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"siBAYA,IAAMA,EAAmB,WACxB,OACC,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACzB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,eACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBACnB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACd,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,SACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,OAAOL,GAAG,sBAC5B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,gBAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,gBAAvB,kBAGA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,gBAAvB,aACA,kBAACQ,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBV,KAAK,gBAAvB,oBAKF,kBAACY,EAAA,EAAD,CAASZ,KAAK,eACb,kBAACa,EAAA,EAAD,uBAOCC,EAAS,WACd,OACC,oCACC,kBAACC,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,6CACA,6JAIA,2BACC,kBAACJ,EAAA,EAAD,CAAQK,QAAQ,WAAhB,oBASDH,EAAUI,IAAOC,IAAV,KAIPC,EAAiBF,IAAOG,GAAV,KACdC,EAAkBJ,IAAOK,GAAV,KAEfC,EAAe,WACpB,OACC,kBAACV,EAAD,KACC,kBAACM,EAAD,cACA,kBAACE,EAAD,gCAIGG,EAAc,WACnB,OACC,kBAACX,EAAD,KACC,kBAACM,EAAD,gBACA,kBAACE,EAAD,gCAgBYI,MAXf,WACC,OACC,oCACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QChFiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6487cbc5.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n\tContainer,\n\tButton,\n\tNavbar,\n\tNav,\n\tNavLink,\n\tNavDropdown,\n\tJumbotron,\n} from \"react-bootstrap\";\n\nconst GlobalNavigation = () => {\n\treturn (\n\t\t<Navbar bg=\"light\" expand=\"lg\">\n\t\t\t<Navbar.Brand href=\"#home\">Nahom Ebssa</Navbar.Brand>\n\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t<Nav className=\"ml-auto\">\n\t\t\t\t\t<Nav.Link href=\"#home\">Home</Nav.Link>\n\t\t\t\t\t<Nav.Link href=\"#about\">About</Nav.Link>\n\t\t\t\t\t<NavDropdown title=\"Work\" id=\"basic-nav-dropdown\">\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-1\">Action</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-2\">\n\t\t\t\t\t\t\tAnother action\n            </NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-3\">Something</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-4\">\n\t\t\t\t\t\t\tSeparated link\n            </NavDropdown.Item>\n\t\t\t\t\t</NavDropdown>\n\t\t\t\t</Nav>\n\t\t\t\t<NavLink href=\"#contact-me\">\n\t\t\t\t\t<Button>Contact Me</Button>\n\t\t\t\t</NavLink>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\t);\n};\n\nconst MyHero = () => {\n\treturn (\n\t\t<>\n\t\t\t<Section>\n\t\t\t\t<Container>\n\t\t\t\t\t<Jumbotron>\n\t\t\t\t\t\t<h1>Hello, world!</h1>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tThis is a simple hero unit, a simple jumbotron-style component for\n\t\t\t\t\t\t\tcalling extra attention to featured content or information.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<Button variant=\"primary\">Learn more</Button>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</Jumbotron>\n\t\t\t\t</Container>\n\t\t\t</Section>\n\t\t</>\n\t);\n};\n\nconst Section = styled.div`\n  background: blue;\n  min-height: 100vh;\n`;\nconst SectionHeading = styled.h1``;\nconst SectionSubtitle = styled.h2``;\n\nconst AboutSection = () => {\n\treturn (\n\t\t<Section>\n\t\t\t<SectionHeading>About</SectionHeading>\n\t\t\t<SectionSubtitle>here you go, about me</SectionSubtitle>\n\t\t</Section>\n\t);\n};\nconst WorkSection = () => {\n\treturn (\n\t\t<Section>\n\t\t\t<SectionHeading>My Work</SectionHeading>\n\t\t\t<SectionSubtitle>here you go, about me</SectionSubtitle>\n\t\t</Section>\n\t);\n};\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<GlobalNavigation />\n\t\t\t<MyHero />\n\t\t\t<AboutSection />\n\t\t\t<WorkSection />\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}