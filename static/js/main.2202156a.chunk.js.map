{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StyledComponents","H1","styled","h1","H2","h2","H3","h3","H4","h4","H5","h5","H6","h6","HDiv","div","Section","SectionSubtitle","UList","ul","SocialItem","li","SocialItemTitle","span","GlobalNavigation","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavLink","Button","MyHero","style","display","alignItems","Container","Jumbotron","Row","Col","flexDirection","paddingRight","Card","width","Img","variant","src","Body","Title","Text","Heading","props","WorkSection","flexWrap","title","link","ghLink","description","map","w","i","key","margin","boxShadow","background","height","alt","padding","ContactSection","socials","icon","BsEnvelope","FaGithub","FaLinkedin","MSocialIcon","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2202156a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Row, Col, Card, Button, Navbar, Nav, NavLink, NavDropdown, Jumbotron, } from \"react-bootstrap\";\nimport './smooth-scroll.css'\n// import { B } from 'react-icons/bs'\nimport { FaLinkedin, FaGithub, FaGithubAlt, FaGithubSquare } from 'react-icons/fa'\nimport { BsEnvelope } from 'react-icons/bs'\n\nconst StyledComponents = {\n    H1: styled.h1`color:inherit;`,\n    H2: styled.h2`color:inherit;`,\n    H3: styled.h3`color:inherit;`,\n    H4: styled.h4`color:inherit;`,\n    H5: styled.h5`color:inherit;`,\n    H6: styled.h6`color:inherit;`,\n    HDiv: styled.div`color:inherit;`,\n    Section: styled.div`\n        background: #0000;\n        min-height: 100vh;\n        padding: 50px 0;\n        /* padding: 20px 20px; */\n        /* margin: 20px 0; */\n        /* border: 1px solid #CCC; */\n        /* border-radius: 3px; */\n        /* box-shadow: 0 2px 10px 0 #0002; */\n    `,\n    SectionSubtitle: styled.h2``,\n    UList: styled.ul`\n        list-style: none;\n    `,\n    SocialItem: styled.li`\n        margin: 10px;\n    `,\n    SocialItemTitle: styled.span`\n        margin-left: 10px;\n    `,\n}\n\nconst GlobalNavigation = () => {\n    return (\n        <Navbar expand=\"lg\">\n            <Navbar.Brand href=\"#home\">Nahom Ebssa</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#about\">About</Nav.Link>\n                    <Nav.Link href=\"#work\">Work</Nav.Link>\n                    {/* <NavDropdown title=\"Work\" id=\"basic-nav-dropdown\">\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-1\">Action</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-2\">\n\t\t\t\t\t\t\tAnother action\n\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-3\">Something</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-4\">\n\t\t\t\t\t\t\tSeparated link\n\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t</NavDropdown> */}\n                </Nav>\n                <NavLink href=\"#contact-me\">\n                    <Button>Contact Me</Button>\n                </NavLink>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nconst MyHero = () => {\n    const { Section } = StyledComponents\n    return (\n        <>\n            <Section style={{ display: 'flex', alignItems: 'center' }}>\n                <Container>\n                    <Jumbotron>\n                        <Row>\n                            <Col>\n                                <h1>Hi I'm Nahom!</h1>\n                                <p>I am a computer science student at George Mason University. I am passionate about artificial intelligence and enjoy creating personal projects using my programming skills</p>\n                            </Col>\n                            <Col>\n                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', display: 'none' }}>\n                                    <div style={{ paddingRight: '20px' }}>\n                                        <h3>Recent</h3>\n                                        <Card style={{ width: '18rem' }}>\n                                            <Card.Img variant=\"top\" src=\"https://fakeimg.pl/180x100\" />\n                                            <Card.Body>\n                                                <Card.Title>Card Title</Card.Title>\n                                                <Card.Text>\n                                                    Some quick example text to build on the card title and make up the bulk of\n                                                    the card's content.\n\t\t\t\t\t\t\t\t\t\t\t</Card.Text>\n                                                <Button variant=\"primary\">Go somewhere</Button>\n                                            </Card.Body>\n                                        </Card>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Jumbotron>\n                </Container>\n            </Section>\n        </>\n    );\n};\nconst Heading = (props) => {\n    const { H1, H2, H3, H4, H5, H6, HDiv } = StyledComponents\n    if (props.h1) return <H1 {...props} />\n    if (props.h2) return <H2 {...props} />\n    if (props.h3) return <H3 {...props} />\n    if (props.h4) return <H4 {...props} />\n    if (props.h5) return <H5 {...props} />\n    if (props.h6) return <H6 {...props} />\n    return <HDiv {...props} />\n}\n\nconst AboutSection = () => {\n    const { Section, SectionSubtitle } = StyledComponents\n    return (\n        <Section id=\"about\">\n            <Heading>About Me</Heading>\n            <SectionSubtitle>Hi, I'm Nahom!</SectionSubtitle>\n            <p>I am a computer science student at George Mason University. I am passionate about artificial intelligence and enjoy creating personal projects using my programming skills</p>\n        </Section>\n    );\n};\nconst WorkSection = () => {\n    const works = [\n        {\n            title: 'Mentor App',\n            link: 'https://nahomebssa.github.io/mentor-app',\n            ghLink: 'https://github.com/nahomebssa/mentor-app',\n            description: `Your mentor search ends here.`\n        },\n        {\n            title: 'Unsplash Daily Wallpaper',\n            // link: 'https://nahomebssa.github.io/unsplash-daily-wallpaper',\n            ghLink: 'https://github.com/nahomebssa/unsplash-daily-wallpaper',\n            description: `Getting tired of seeing the same thing on your desktop every day? Now you can renew your desktop with some view goals from Unsplash's wealth of wallpapers`\n        },\n        {\n            title: 'Github Issues in Pictures',\n            link: 'https://nahomebssa.github.io/mentor-app',\n            ghLink: 'https://github.com/nahomebssa/mentor-app',\n            description: `A picture is a thousand words, or actually a thousand lines of code. This neat little script fetches all the images from issues in a repo and bundles them in an html page to envision the project's future.`\n        },\n    ]\n    const { Section, SectionSubtitle } = StyledComponents\n    return (\n        <Section id=\"work\">\n            <Heading>My Work</Heading>\n            <SectionSubtitle>Projects I'm working on...</SectionSubtitle>\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                {works.map((w, i) => {\n                    return (\n                        <Card key={i} style={{ width: '29%', margin: '2%', boxShadow: '0 2px 10px 0 #0004' }}>\n                            <a href={w.link} style={{ background: 'slategray', height: '200px' }}>\n                                <Card.Img src=\"#\" alt=\"\" />\n                            </a>\n                            <div style={{ padding: 20 }}>\n                                <Card.Title>\n                                    <Button variant=\"link\" href={w.link}>\n                                        <h3>{w.title}</h3>\n                                    </Button>\n                                </Card.Title>\n                                <Card.Text>\n                                    {w.description}\n                                </Card.Text>\n                            </div>\n                            <Button variant=\"link\" href={w.link}>\n                                <FaGithub />\n                            </Button>\n                        </Card>\n                    )\n                })}\n            </div>\n        </Section>\n    );\n};\n\nconst ContactSection = () => {\n\n    const { UList, SocialItem, SocialItemTitle } = StyledComponents\n\n    const socials = [\n        { icon: BsEnvelope, href: 'mailto:enahom13@gmail.com', title: 'Github' },\n        { icon: FaGithub, href: 'https://github.com/nahomebssa', title: 'Github' },\n        { icon: FaLinkedin, href: 'https://linkedin.com/nahomebssa', title: 'LinkedIn' },\n    ]\n\n    const { Section, SectionSubtitle } = StyledComponents\n    return (\n        <Section id=\"contact-me\">\n            <Heading>Contact Me</Heading>\n            <SectionSubtitle>Talk to me!</SectionSubtitle>\n            <UList>\n                {\n                    socials.map(({ href, icon: MSocialIcon, title }, i) => {\n                        return (\n                            <SocialItem key={i} style={{ margin: 10 }}>\n                                <Button href={href}>\n                                    <MSocialIcon />\n                                    <SocialItemTitle>{title}</SocialItemTitle>\n                                </Button>\n                            </SocialItem>\n                        )\n                    })\n                }\n            </UList>\n\n        </Section>\n    );\n};\n\nfunction App() {\n    return (\n        <Container>\n            <GlobalNavigation />\n            <MyHero />\n            {/* <AboutSection /> */}\n            <WorkSection />\n            <ContactSection />\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}