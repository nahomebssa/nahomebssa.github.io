{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Container","GlobalNavigation","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavLink","Button","MyHero","Section","StyledComponents","style","display","alignItems","Jumbotron","Row","Col","sm","flexDirection","paddingRight","Card","width","Img","variant","src","Body","Title","Text","WorkSection","SectionSubtitle","title","link","ghLink","description","map","i","RepoCard","key","alt","Content","padding","size","ContactSection","socials","icon","BsEnvelope","FaGithub","FaLinkedin","UList","SocialItem","SocialItemTitle","MSocialIcon","Heading","props","H1","H2","H3","H4","H5","H6","HDiv","h1","h2","h3","h4","h5","h6","styled","div","ul","li","span","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10f50490.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n    Container,\n    Row,\n    Col,\n    Card,\n    Button,\n    Navbar,\n    Nav,\n    NavLink,\n    NavDropdown,\n    Jumbotron,\n} from \"react-bootstrap\";\nimport \"./smooth-scroll.css\";\n// import { B } from 'react-icons/bs'\nimport {\n    FaLinkedin,\n    FaGithub,\n    FaGithubAlt,\n    FaGithubSquare,\n} from \"react-icons/fa\";\nimport { BsEnvelope } from \"react-icons/bs\";\n\nexport default function App() {\n    return (\n        <Container>\n            <GlobalNavigation />\n            <MyHero />\n            {/* <AboutSection /> */}\n            <WorkSection />\n            <ContactSection />\n        </Container>\n    );\n}\n\nconst GlobalNavigation = () => {\n    return (\n        <Navbar expand=\"lg\">\n            <Navbar.Brand href=\"#home\">Nahom Ebssa</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    {/* <Nav.Link href=\"#about\">About</Nav.Link> */}\n                    <Nav.Link href=\"#work\">Work</Nav.Link>\n                    {/* <NavDropdown title=\"Work\" id=\"basic-nav-dropdown\">\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-1\">Action</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-2\">\n\t\t\t\t\t\t\tAnother action\n\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-3\">Something</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t<NavDropdown.Item href=\"#work/work-4\">\n\t\t\t\t\t\t\tSeparated link\n\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t</NavDropdown> */}\n                </Nav>\n                <NavLink href=\"#contact-me\">\n                    <Button>Contact Me</Button>\n                </NavLink>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\nconst MyHero = () => {\n    const { Section } = StyledComponents;\n    return (\n        <>\n            <Section style={{ display: \"flex\", alignItems: \"center\" }}>\n                <Container>\n                    <Jumbotron>\n                        <Row>\n                            <Col sm>\n                                <h1>Hi I'm Nahom!</h1>\n                                <p>\n                                    I am a computer science student at George\n                                    Mason University. I am passionate about\n                                    artificial intelligence and enjoy creating\n                                    personal projects using my programming\n                                    skills\n                                </p>\n                            </Col>\n                            <Col sm>\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        flexDirection: \"column\",\n                                        alignItems: \"flex-end\",\n                                        display: \"none\",\n                                    }}\n                                >\n                                    <div style={{ paddingRight: \"20px\" }}>\n                                        <h3>Recent</h3>\n                                        <Card style={{ width: \"18rem\" }}>\n                                            <Card.Img\n                                                variant=\"top\"\n                                                src=\"https://fakeimg.pl/180x100\"\n                                            />\n                                            <Card.Body>\n                                                <Card.Title>\n                                                    Card Title\n                                                </Card.Title>\n                                                <Card.Text>\n                                                    Some quick example text to\n                                                    build on the card title and\n                                                    make up the bulk of the\n                                                    card's content.\n                                                </Card.Text>\n                                                <Button variant=\"primary\">\n                                                    Go somewhere\n                                                </Button>\n                                            </Card.Body>\n                                        </Card>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Jumbotron>\n                </Container>\n            </Section>\n        </>\n    );\n};\nconst AboutSection = () => {\n    const { Section, SectionSubtitle } = StyledComponents;\n    return (\n        <Section id=\"about\">\n            <Heading>About Me</Heading>\n            <SectionSubtitle>Hi, I'm Nahom!</SectionSubtitle>\n            <p>\n                I am a computer science student at George Mason University. I am\n                passionate about artificial intelligence and enjoy creating\n                personal projects using my programming skills.\n            </p>\n        </Section>\n    );\n};\nconst WorkSection = () => {\n    const works = [\n        {\n            title: \"Mentor App\",\n            link: \"https://nahomebssa.github.io/mentor-app\",\n            ghLink: \"https://github.com/nahomebssa/mentor-app\",\n            description: `Your mentor search ends here.`,\n        },\n        {\n            title: \"Unsplash Daily Wallpaper\",\n            // link: 'https://nahomebssa.github.io/unsplash-daily-wallpaper',\n            ghLink: \"https://github.com/nahomebssa/unsplash-daily-wallpaper\",\n            description: `Getting tired of seeing the same thing on your desktop every day? Now you can renew your desktop with some view goals from Unsplash's wealth of wallpapers!`,\n        },\n        {\n            title: \"Github Issues in Pictures\",\n            link: \"https://github.com/nahomebssa/gh-image-crawler\",\n            ghLink: \"https://github.com/nahomebssa/gh-image-crawler\",\n            description: `A picture is a thousand words, or actually a thousand lines of code. This neat little script fetches all the images from issues in a repo and bundles them in an html page to envision the project's future.`,\n        },\n    ];\n    const { Section, SectionSubtitle } = StyledComponents;\n    return (\n        <Section id=\"work\">\n            <Heading>My Work</Heading>\n            <SectionSubtitle>Projects I'm working on...</SectionSubtitle>\n            <Container>\n                <Row>\n                    {works.map(\n                        (\n                            {\n                                link = \"#\",\n                                title,\n                                description,\n                                ghLink = \"https://github.com/nahomebssa?tab=repositories\",\n                            },\n                            i\n                        ) => (\n                            <Col sm>\n                                <RepoCard key={i} style={{ width: \"100%\" }}>\n                                    <RepoCard.Img href={link}>\n                                        <Card.Img src=\"#\" alt=\"\" />\n                                    </RepoCard.Img>\n                                    <RepoCard.Content>\n                                        <Card.Title>\n                                            <Button variant=\"link\" href={link}>\n                                                <h3>{title}</h3>\n                                            </Button>\n                                        </Card.Title>\n                                        <Card.Text>{description}</Card.Text>\n                                    </RepoCard.Content>\n                                    <div\n                                        style={{\n                                            display: \"flex\",\n                                            padding: \"20px\",\n                                        }}\n                                    >\n                                        <Button variant=\"link\" href={ghLink}>\n                                            <FaGithub size={24} />\n                                        </Button>\n                                    </div>\n                                </RepoCard>\n                            </Col>\n                        )\n                    )}\n                </Row>\n            </Container>\n        </Section>\n    );\n};\nconst ContactSection = () => {\n    const socials = [\n        {\n            icon: BsEnvelope,\n            href: \"mailto:enahom13@gmail.com\",\n            title: \"Email\",\n        },\n        {\n            icon: FaGithub,\n            href: \"https://github.com/nahomebssa\",\n            title: \"Github\",\n        },\n        {\n            icon: FaLinkedin,\n            href: \"https://linkedin.com/nahomebssa\",\n            title: \"LinkedIn\",\n        },\n    ];\n\n    const {\n        Section,\n        SectionSubtitle,\n        UList,\n        SocialItem,\n        SocialItemTitle,\n    } = StyledComponents;\n    return (\n        <Section id=\"contact-me\">\n            <Heading>Contact Me</Heading>\n            <SectionSubtitle>Talk to me!</SectionSubtitle>\n            <UList>\n                {socials.map(({ href, icon: MSocialIcon, title }, i) => {\n                    return (\n                        <SocialItem key={i}>\n                            <Button variant=\"link\" href={href}>\n                                <MSocialIcon />\n                                <SocialItemTitle>{title}</SocialItemTitle>\n                            </Button>\n                        </SocialItem>\n                    );\n                })}\n            </UList>\n        </Section>\n    );\n};\n\nconst Heading = (props) => {\n    const { H1, H2, H3, H4, H5, H6, HDiv } = StyledComponents;\n    if (props.h1) return <H1 {...props} />;\n    if (props.h2) return <H2 {...props} />;\n    if (props.h3) return <H3 {...props} />;\n    if (props.h4) return <H4 {...props} />;\n    if (props.h5) return <H5 {...props} />;\n    if (props.h6) return <H6 {...props} />;\n    return <HDiv {...props} />;\n};\nconst StyledComponents = {\n    H1: styled.h1`\n        color: inherit;\n    `,\n    H2: styled.h2`\n        color: inherit;\n    `,\n    H3: styled.h3`\n        color: inherit;\n    `,\n    H4: styled.h4`\n        color: inherit;\n    `,\n    H5: styled.h5`\n        color: inherit;\n    `,\n    H6: styled.h6`\n        color: inherit;\n    `,\n    HDiv: styled.div`\n        color: inherit;\n    `,\n    Section: styled.div`\n        background: #0000;\n        min-height: 100vh;\n        padding: 50px 0;\n        /* padding: 20px 20px; */\n        /* margin: 20px 0; */\n        /* border: 1px solid #CCC; */\n        /* border-radius: 3px; */\n        /* box-shadow: 0 2px 10px 0 #0002; */\n    `,\n    SectionSubtitle: styled.h2``,\n    UList: styled.ul`\n        padding: 20px;\n        list-style: none;\n    `,\n    SocialItem: styled.li`\n        margin: 10px;\n    `,\n    SocialItemTitle: styled.span`\n        margin-left: 10px;\n    `,\n};\nconst RepoCard = styled(Card)`\n    width: 29%;\n    height: 100%;\n    max-height: 70vh;\n    margin: 20% 2%;\n    box-shadow: 0 2px 10px 0 #0004;\n`;\nRepoCard.Img = styled.div`\n    height: 30vh;\n    background: slategray;\n`;\nRepoCard.Content = styled.div`\n    padding: 20px;\n    height: 100%;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}